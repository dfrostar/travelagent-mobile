name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18.x'
  JAVA_VERSION: '11'
  EXPO_CLI_VERSION: '6.x'
  EXPO_PUBLIC_OPENAI_API_KEY: ${{ secrets.EXPO_PUBLIC_OPENAI_API_KEY }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
        
    - name: Install Dependencies
      run: |
        npm ci
        npx expo install --fix
      
    - name: Run Tests
      run: npm run test:ci
      env:
        CI: true
      
    - name: Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true
      
  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
        
    - name: Install Dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      continue-on-error: false
      
    - name: Run Type Check
      run: npm run type-check
      continue-on-error: false

  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: ${{ env.JAVA_VERSION }}
        
    - name: Cache Gradle
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
        
    - name: Install Dependencies
      run: |
        npm ci
        cd android && ./gradlew clean
        
    - name: Build Android Release
      run: |
        cd android
        ./gradlew assembleRelease --no-daemon
      
    - name: Upload Android Release
      uses: actions/upload-artifact@v3
      with:
        name: app-release
        path: android/app/build/outputs/apk/release/app-release.apk
        retention-days: 5

  build-ios:
    name: Build iOS
    runs-on: macos-latest
    needs: [test, lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Cache CocoaPods
      uses: actions/cache@v3
      with:
        path: ios/Pods
        key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pods-
        
    - name: Install Dependencies
      run: |
        npm ci
        cd ios && pod install
        
    - name: Build iOS Release
      run: |
        cd ios
        xcodebuild -workspace TravelAgent.xcworkspace -scheme TravelAgent -configuration Release -sdk iphoneos CODE_SIGNING_ALLOWED=NO
        
    - name: Upload iOS Release
      uses: actions/upload-artifact@v3
      with:
        name: ios-release
        path: ios/build/Release-iphoneos/TravelAgent.app
        retention-days: 5

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    timeout-minutes: 15
    
    steps:
    - name: Download Android Release
      uses: actions/download-artifact@v3
      with:
        name: app-release
        
    - name: Download iOS Release
      uses: actions/download-artifact@v3
      with:
        name: ios-release
        
    - name: Setup Google Play
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
        
    - name: Setup App Store Connect
      env:
        APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
        APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}
      run: |
        echo "Setting up App Store Connect credentials"
        
    - name: Deploy to App Store
      if: success()
      run: |
        echo "Deploying to App Store"
        # Add actual deployment steps using App Store Connect API
        
    - name: Deploy to Play Store
      if: success()
      run: |
        echo "Deploying to Play Store"
        # Add actual deployment steps using Google Play Developer API

    - name: Notify on Success
      if: success()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_MESSAGE: 'Successfully deployed new version to App Store and Play Store :rocket:'
        
    - name: Notify on Failure
      if: failure()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_COLOR: '#FF0000'
        SLACK_MESSAGE: 'Failed to deploy new version :x:'
